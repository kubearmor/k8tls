#!/bin/bash

BDIR=`dirname $0`
FIPS_140_3_APPROVED_CIPHERS="config/fips-140-3.json"
chk_cmd()
{
	if ! command -v $1 &>/dev/null; then
		echo "<$1> command not found"
		echo "$2"
		exit
	fi
}

prerequisites()
{
	chk_cmd openssl "Install OpenSSL"
}

usage()
{
	cat << EOF
Usage: $0 <options>

Options:
-f | --infile input file containing list of addresses (mandatory)
--json output json file
--csv output csv file
--compact-json output json file with no newline characters
-h | --help
EOF
	exit 1
}

parse_cmdargs()
{
	OPTS=`getopt -o f:h --long csv:,infile:,json:,compact-json,help -n 'parse-options' -- "$@"`
	[[ $? -ne 0 ]] && usage
	eval set -- "$OPTS"
	while true; do
		case "$1" in
			-f | --infile ) infile="$2"; [[ ! -f $infile ]] && echo "$infile file not found" && exit 2; shift 2;;
			--json ) jsonout="$2"; [[ -f $jsonout ]] && rm -f $jsonout; shift 2;;
			--csv ) csvout="$2"; shift 2;;
			--compact-json ) compact_json_out="/tmp/compact_report.json"; shift 1;;
			-h | --help ) usage; shift 1;;
			-- ) shift; break ;;
			* ) break ;;
		esac
	done
	[[ "$infile" == "" ]] && echo "No address list provided, use --infile <file>" && exit 2
	[[ "$csvout" == "" ]] && csvout="/tmp/out.csv"
	[[ -f $csvout ]] && rm -f $csvout
	[[ "$summcsv" == "" ]] && summcsv="/tmp/k8tls_summary.csv"
	[[ -f $summcsv ]] && rm -f $summcsv
	[[ "$JSON" != "" ]] && jsonout=$JSON
	[[ "$jsonout" == "" ]] && jsonout="/tmp/report.json"
}

csvheader()
{
	[[ "$csvout" == "" ]] && return
	if [ ! -f "$csvout" ]; then
		echo "Name,Address,Type,Status,Version,Ciphersuite,Hash,Signature,Verification,FIPS_140_3_Compliant" > $csvout
	fi
}

unsetvars()
{
	# unset previous vars
	varlist=`set | grep "^TLS_" | sed 's/=.*//g'`
	varlist=`echo $varlist`
	unset $varlist

	varlist=`set | grep "^TP_" | sed 's/=.*//g'`
	varlist=`echo $varlist`
	unset $varlist
}

jsonendpoint_hdr()
{
	ns=""
	[[ "$SVC_Namespace" != "" ]] && ns="\"namespace\": \"$SVC_Namespace\","
	[[ $endpoint_cnt -gt 0 ]] && echo "," >> $jsonout
	cat << EOF >> $jsonout
		{
			$ns
			"svc": "$SVC_Name",
			"host": "$SVC_Host",
			"port": "$SVC_Port",
			"type": "$SVC_Type",
			"finding": [
EOF
}

jsonendpoint_ftr()
{
	cat << EOF >> $jsonout
			]
		}
EOF
}

TMPJSONSEC=/tmp/k8tls_json_section_$$.json

. $BDIR/findings_tls
. $BDIR/findings_terrapin
scansvc()
{
	jsonendpoint_hdr
	TMPFNLIST=/tmp/k8tls_fnlist_$$.txt
	declare -F | grep "k8tls_" | sort | awk '{print $3}' > $TMPFNLIST
	cnt=0
	while read fn; do
		IFS="_" read -r -a tok <<< "$fn"
		[[ $SVC_Scanners != *"${tok[1]}"* ]] && continue
		echo -en "\texecuting [$fn] tool=${tok[1]}...\n"
		status="OK"
		$fn
		if [ -f $TMPJSONSEC ]; then
			[[ $cnt -gt 0 ]] && echo "," >> $jsonout
			cat $TMPJSONSEC >> $jsonout
			rm -f $TMPJSONSEC
		fi
		((cnt++))
	done < $TMPFNLIST
	jsonendpoint_ftr
}

getsummary()
{
	status_arr=( 
		"certificate has expired"
		"self-signed certificate"
		"insecure port"
		"connection failure"
		"FIPS 140-3 non-compliant"
	)
	regex_arr=( 
		"certificate has expired"
		"self-signed certificate"
		"PLAIN_TEXT"
		"CONNFAIL"
		"FAIL"
	)
	echo "Status,Count" > $summcsv
	for((i=0;;i++)); do
		status="${status_arr[$i]}"
		regex="${regex_arr[$i]}"
		[[ "$status" == "" ]] && break
		cnt=`grep "$regex" $csvout | wc -l`
		[[ $cnt -eq 0 ]] && continue
		echo "$status,$cnt" >> $summcsv
	done
	echo "Summary:"
	tabled --in $summcsv
}

jsonheader()
{
	cat << EOF > $jsonout
{
	"app": {
		"version": "v0.1"
	},
	"endpoints": [
EOF
}

jsonfooter()
{
	cat << EOF >> $jsonout
	]
}
EOF
	echo "json report generated at [$jsonout]"
}

main()
{
	csvheader
	jsonheader
	endpoint_cnt=0
	while read line; do
		[[ $line == \#* ]] && continue
		echo "checking [$line]..."
		unsetvars
		IFS=" " read -r -a arr <<< "$line"
		SVC_Address=${arr[0]}
		SVC_Host=${SVC_Address/:*}
		SVC_Port=${SVC_Address/*:}
		SVC_Name=${arr[1]}
		SVC_Type=${arr[2]}
		# Service type is only applicable for Kubernetes
		[[ "$SVC_Type" == "" ]] && SVC_Type="NA"
		SVC_Scanners=${arr[3]}
		[[ "$SVC_Scanners" == "" ]] && SVC_Scanners="tls"
		scansvc
		((endpoint_cnt++))
	done < $infile
	jsonfooter
	[[ -f "$csvout" ]] && tabled --in $csvout --config ${TABLED_YAML-tabled.yaml}
	if [[ -n "$compact_json_out" && -f "$jsonout" ]]; then
    	jq -c . $jsonout > $compact_json_out
  	fi
	echo ;
	getsummary
}

# Processing starts here
parse_cmdargs "$@"
main
rm -f /tmp/k8tls_*
