#!/bin/bash

set -o pipefail

opensslscan()
{
	tmp=/tmp/tls_$$.out
	rm -f $tmp 2>/dev/null
	timeout 2s openssl s_client -CApath /etc/ssl/certs/ -connect "$SVC_Address" -brief < /dev/null 2>$tmp
	conn_estd=0
	while read line; do
		[[ "$line" == "CONNECTION ESTABLISHED" ]] && conn_estd=1
		[[ $conn_estd -ne 1 ]] && continue
		[[ $line != *:* ]] && continue
		key=${line/:*/}
		val=${line/*: /}
		key=${key// /_}
		# printf -v "TLS_$key" '%s' "$val"
		TLS_Status="TLS"
	done < $tmp
	fips_compliance_check
	[[ "$TLS_Verification_error" != "" ]] && TLS_Verification="$TLS_Verification_error"
}

tls_csvreport()
{
	[[ "$csvout" == "" ]] && return
	cat << EOF >> $csvout
"$SVC_Name","$SVC_Address","$SVC_Type","$TLS_Status","$TLS_Protocol_version","$TLS_Ciphersuite","$TLS_Hash_used","$TLS_Signature_type","$TLS_Verification","$FIPS_140_3_Compliant"
EOF
}

do_openssl_scan()
{
	[[ "$TLS_Status" != "" ]] && return	#already scanned
	TLS_Status="PLAIN_TEXT"
	nc -w 1 -z ${SVC_Address/:/ }
	case "$?" in
		0) opensslscan ;;
		*) TLS_Status="CONNFAIL" ;;
	esac
	tls_csvreport
}

k8tls_tls_00chktls()
{
	do_openssl_scan
	[[ "$TLS_Status" != "TLS" ]] && status="FAIL"
	cat << EOF >> $TMPJSONSEC
				{
					"plugin": "tls-security",
					"title": "use of TLS security",
					"compliance": "NIST.SP.800-52",
					"control-id": "2.1",
					"description": "It is mandatory for TLS to be enabled for all network communications including east-west traffic.",
					"link": "https://csrc.nist.gov/news/2019/nist-publishes-sp-800-52-revision-2",
					"severity": "critical",
					"remediationEstEffort": "medium",
					"solution": "enable TLS or transport security on the port.",
					"status": "$status"
				}
EOF
}

k8tls_tls_01checkversion()
{
	do_openssl_scan
	[[ "$TLS_Status" != "TLS" ]] && return	# no finding
	if [ "$TLS_Protocol_version" != "TLSv1.2" ] && [ "$TLS_Protocol_version" != "TLSv1.3" ]; then
		status="FAIL"
	
	cat << EOF >> $TMPJSONSEC
				{
					"plugin": "tls-version",
					"title": "use secure TLS protocol version",
					"compliance": "NIST.SP.800-52",
					"control-id": "3.1",
					"description": "Using TLS >=v1.2 is mandatory for all applications. Version currently in use is $TLS_Protocol_version",
					"link": "https://csrc.nist.gov/news/2019/nist-publishes-sp-800-52-revision-2",
					"severity": "critical",
					"remediationEstEffort": "low",
					"solution": "enable TLS >=v1.2 transport security on the port.",
					"status": "$status"
				}
EOF
  fi
}

k8tls_tls_04certExpiryWarning()
{
	do_openssl_scan
	[[ "$TLS_Status" != "TLS" ]] && return

	# default to 30 days if not set
	DAYS=${CERT_WARN_BEFORE_DAYS}

	# Get the expiry date from the server cert
	expiry_date=$(openssl s_client -connect "$SVC_Address" -servername "$SVC_Address" < /dev/null 2>/dev/null |
		openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)

	# Convert to epoch for comparison
	expiry_epoch=$(date -d "$expiry_date" +%s 2>/dev/null)
	now_epoch=$(date +%s)
	warn_epoch=$(( now_epoch + DAYS*86400 ))

		# Skip if already expired â€” assume another function handles it
	[[ $expiry_epoch -lt $now_epoch ]] && return

	if [[ $expiry_epoch -lt $warn_epoch ]]; then
		days_left=$(( (expiry_epoch - now_epoch) / 86400 ))
		days_left=${days_left#-} # handle negative
		status="FAIL"
		local description="TLS certificate for $SVC_Address is expiring in $days_left day(s) on $expiry_date."
		local severity="high"
		local solution="Renew the TLS certificate before it expires."
		local remediation="low"
	else
		status="OK"
		local description="TLS certificate for $SVC_Address is valid until $expiry_date."
		local severity="info"
		local solution="No action needed. TLS is not expiring any time soon"
		local remediation="NA"

	fi

		cat << EOF >> $TMPJSONSEC
			{
				"plugin": "tls-cert-expiry-warning",
				"title": "Certificate expiration check",
				"description": "$description",
				"compliance": "Best Practice",
				"control-id": "3.4",
				"link": "https://www.nccoe.nist.gov/publication/1800-16/VolB/index.html",
				"severity": "$severity",
				"remediationEstEffort": "$remediation",
				"solution": "$solution",
				"status": "$status"
			}
EOF
}

k8tls_tls_02certificateChecks()
{
	do_openssl_scan
	[[ "$TLS_Status" != "TLS" ]] && return	# no finding
	if [ "$TLS_Verification" != "" ]; then
		status="FAIL"
		solution="Update certificate signed from trusted CA."
		finding="$TLS_Verification"
		severity="low"
	fi
	case "$TLS_Verification" in
		"certificate has expired")
			solution="renew x.509 certificate"
			finding="TLS certificate has expired. Renew the certificate."
			severity="critical"
			;;
		"self-signed certificate")
			solution="Use certificates signed by approved Certificates Authority (CA)."
			finding="Self-signed certificates have the risk of MITM attacks."
			severity="medium"
			;;
	esac
	cat << EOF >> $TMPJSONSEC
				{
					"plugin": "tls-certificate-check",
					"title": "check for TLS certificate best practices",
					"compliance": "NIST.SP.800-52",
					"control-id": "3.3",
					"description": "$finding",
					"link": "https://csrc.nist.gov/news/2019/nist-publishes-sp-800-52-revision-2",
					"severity": "$severity",
					"remediationEstEffort": "low",
					"solution": "$solution",
					"status": "$status"
				}
EOF
}

fips_compliance_check()
{
	do_openssl_scan
	if [ "$TLS_Status" != "TLS" ]; then
		control_id="3.2"
		description="Secure protocol and FIPS-approved ciphers are required to meet the requirements of FIPS-140-3 compliant encryption."
		severity="critical"

		ciphersFor12="`jq '.TLS_versions[1].cipher_suites[] | join(", ")' $FIPS_140_3_APPROVED_CIPHERS`"
		ciphersFor13="`jq '.TLS_versions[2].cipher_suites[] | join(", ")' $FIPS_140_3_APPROVED_CIPHERS`"
		solution="Implement secure protocol (TLS >= v1.2) and FIPS-approved ciphers."
		solution+=" TLS_version: TLSv1.2, ciphersuites: [$(echo $ciphersFor12 | sed 's/\"//g' | sed 's/ /, /g; s/, $//')]"
		solution+=" TLS_version: TLSv1.3, ciphersuites: [$(echo $ciphersFor13 | sed 's/\"//g' | sed 's/ /, /g; s/, $//')]"

		FIPS_140_3_Compliant="FAIL"
		appendSpec
		return
	fi

	control_id="3.3"
	description="FIPS-approved ciphers to meet the requirements of FIPS-140-3 compliant encryption."
	severity="medium"

	case "$TLS_Protocol_version" in
	"TLSv1.1"|"TLSv1.0")
		ciphers="`jq '.TLS_versions[0].cipher_suites[] | join(", ")' $FIPS_140_3_APPROVED_CIPHERS`"
		solution="For $TLS_Protocol_version implement one of following FIPS-approved ciphers: [`echo $ciphers | sed 's/\"//g' | sed 's/ /, /g; s/, $//'`]"
		FIPS_140_3_Compliant="FAIL"

		result=$(jq ".TLS_versions[0].cipher_suites[] | select(.cipher_suite == \"$TLS_Ciphersuite\") | any" "$FIPS_140_3_APPROVED_CIPHERS")
		
		[[ $result == "true" ]] && {
			FIPS_140_3_Compliant="OK"
			description="Using $TLS_Protocol_version secure protocol and $TLS_Ciphersuite FIPS-approved cipher."
			solution="NA"
		}
		;;

	"TLSv1.2")
		ciphers="`jq '.TLS_versions[1].cipher_suites[] | join(", ")' $FIPS_140_3_APPROVED_CIPHERS`"
		solution="For $TLS_Protocol_version implement one of following FIPS-approved ciphers: [`echo $ciphers | sed 's/\"//g' | sed 's/ /, /g; s/, $//'`]"
		FIPS_140_3_Compliant="FAIL"

		result=$(jq ".TLS_versions[1].cipher_suites[] | select(.cipher_suite == \"$TLS_Ciphersuite\") | any" "$FIPS_140_3_APPROVED_CIPHERS")
				
		[[ $result == "true" ]] && {
			FIPS_140_3_Compliant="OK"
			description="Using $TLS_Protocol_version secure protocol and $TLS_Ciphersuite FIPS-approved cipher."
			solution="NA"
		}
		;;

	"TLSv1.3")
		ciphers="`jq '.TLS_versions[2].cipher_suites[] | join(", ")' $FIPS_140_3_APPROVED_CIPHERS`"
		solution="For $TLS_Protocol_version implement one of following FIPS-approved ciphers: [`echo $ciphers | sed 's/\"//g' | sed 's/ /, /g; s/, $//'`]"
		FIPS_140_3_Compliant="FAIL"

		result=$(jq ".TLS_versions[2].cipher_suites[] | select(.cipher_suite == \"$TLS_Ciphersuite\") | any" "$FIPS_140_3_APPROVED_CIPHERS")

		[[ $result == "true" ]] && {
			FIPS_140_3_Compliant="OK"
			description="Using $TLS_Protocol_version secure protocol and $TLS_Ciphersuite FIPS-approved cipher."
			solution="NA"
		}
		;;
	esac
	
	appendSpec
}

k8tls_tls_03exposedPorts() {
	if [ "$SVC_Type" == "NodePort" ]; then
		status="PASS"
		clusterName=$(curl -s http://169.254.169.254/latest/user-data | grep -E '^/etc/eks/bootstrap\.sh\s+([^\s]+)' | cut -d' ' -f2 2> /dev/null)
		securityGroups=$(curl -s http://169.254.169.254/latest/meta-data/security-groups 2> /dev/null)
		MAC=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -n 1 2> /dev/null)
		securityGroupId=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC}/security-group-ids 2> /dev/null)
		vpcId=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC}/vpc-id 2> /dev/null)
		subNet=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC}/subnet-id 2> /dev/null)

		if [[ -z "$clusterName" || -z "$securityGroups" || -z "$MAC" || -z "$securityGroupId" || -z "$vpcId" || -z "$subNet" ]]; then
    		echo "One or more fields are empty. Skipping exposedPorts check..."
			return
    		# exit 1
		fi

		# Use parameter expansion to split the SVC_Name
		namespace="${SVC_Name%%/*}"
		name="${SVC_Name##*/}"
		
		nodePortValue=$(kubectl -n "${namespace}" get svc "${name}" -o=custom-columns='NODEPORT:.spec.ports[*].nodePort' | tail -1)
		isExposedPort=$(aws ec2 describe-security-group-rules | jq ".SecurityGroupRules[] | select(.IsEgress == false and .ToPort == $nodePortValue)")
		if [[ -z "${isExposedPort}" ]]; then
			return
		fi
		
		cat << EOF >> $TMPJSONSEC
				{
					"plugin": "exposed-ports",
					"title": "Publicly exposed ports",
					"description": "Publicly exposed ports increase security risks. Disable unnecessary ports to protect systems from unauthorized access."
					"severity": "critical",
					"remediationEstEffort": "medium",
					"solution": "Disable publicly exposed ports",
					"status": "$status",
					"clusterName": "$clusterName",
					"securityGroups": "$securityGroups",
					"securityGroupId": "$securityGroupId",
					"vpcId": "$vpcId",
					"subNet": "$subNet",
					"serviceNamespaceAndName": "$SVC_Name",
					"exposedPort": "$nodePortValue"
				}
EOF
	fi
}

appendSpec()
{
	cat << EOF >> $TMPJSONSEC
				{
					"plugin": "fips-140-3-compliance-check",
					"title": "FIPS 140-3 compliance check",
					"compliance": "FIPS.140.3",
					"control-id": "$control_id",
					"description": "$description",
					"link": "https://www.gsa.gov/system/files?file=SSL-TLS-Implementation-%5BCIO-IT-Security-14-69-Rev-7%5D-06-12-2023.pdf",
					"severity": "$severity",
					"remediationEstEffort": "medium",
					"solution": "$solution",
					"status": "$FIPS_140_3_Compliant"
				},
EOF
}
